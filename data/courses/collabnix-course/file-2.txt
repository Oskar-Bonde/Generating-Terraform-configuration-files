# raw-data/collabnix-course\beginners\aws\modules\API_Gateway & CloudWatch
resource "aws_api_gateway_rest_api" "panda" {
  name = "panda"
}

resource "aws_api_gateway_resource" "healthcheck" {
  parent_id   = aws_api_gateway_rest_api.panda.root_resource_id
  path_part   = "healthcheck"
  rest_api_id = aws_api_gateway_rest_api.panda.id
}

resource "aws_api_gateway_method" "panda1" {
  rest_api_id          = aws_api_gateway_rest_api.panda.id
  resource_id          = aws_api_gateway_resource.healthcheck.id
  http_method          = "POST"
  authorization        = "NONE"
}



resource "aws_api_gateway_integration" "integration" {

  rest_api_id             = aws_api_gateway_rest_api.panda.id
  resource_id             = aws_api_gateway_resource.healthcheck.id
  http_method             = aws_api_gateway_method.panda1.http_method
  type                    = "MOCK"

  request_parameters = {
    "integration.request.header.X-Authorization" = "'static'"
  }

  # Transforms the incoming XML request to JSON
  request_templates = {
    "application/xml" = <<EOF
{
   
   "statusCode" : 200,
   "message" : "Healthy"
}
EOF
  }
}
resource "aws_api_gateway_method_response" "response_200" {
  rest_api_id = aws_api_gateway_rest_api.panda.id
  resource_id = aws_api_gateway_resource.healthcheck.id
  http_method = aws_api_gateway_method.panda1.http_method
  status_code = "200"
}

resource "aws_api_gateway_integration_response" "MyDemoIntegrationResponse" {
  rest_api_id = aws_api_gateway_rest_api.panda.id
  resource_id = aws_api_gateway_resource.healthcheck.id
  http_method = aws_api_gateway_method.panda1.http_method
  status_code = aws_api_gateway_method_response.response_200.status_code
  # Transforms the backend JSON response to XML
    response_templates = {
    "application/xml" = <<EOF
#set($inputRoot = $input.path('$'))
<?xml version="1.0" encoding="UTF-8"?>
<message>
    $inputRoot.body
</message>
EOF
  }
}
resource "aws_api_gateway_deployment" "panda1" {
  rest_api_id = aws_api_gateway_rest_api.panda.id

  triggers = {

    redeployment = sha1(jsonencode([
      aws_api_gateway_resource.healthcheck.id,
      aws_api_gateway_method.panda1.id,
      aws_api_gateway_integration.integration.id,
    ]))
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_resource" "panda" {
  parent_id   = aws_api_gateway_rest_api.panda.root_resource_id
  path_part   = "panda"
  rest_api_id = aws_api_gateway_rest_api.panda.id
}

resource "aws_api_gateway_method" "panda" {
  authorization = "NONE"
  http_method   = "GET"
  resource_id   = aws_api_gateway_resource.panda.id
  rest_api_id   = aws_api_gateway_rest_api.panda.id
}
resource "aws_api_gateway_integration" "panda" {
  http_method = aws_api_gateway_method.panda.http_method
  resource_id = aws_api_gateway_resource.panda.id
  rest_api_id = aws_api_gateway_rest_api.panda.id
  type        = "MOCK"
}



resource "aws_api_gateway_deployment" "panda" {
  rest_api_id = aws_api_gateway_rest_api.panda.id

  triggers = {

    redeployment = sha1(jsonencode([
      aws_api_gateway_resource.panda.id,
      aws_api_gateway_method.panda.id,
      aws_api_gateway_integration.panda.id,
    ]))
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_stage" "panda" {
  depends_on = [aws_api_gateway_deployment.panda1, aws_api_gateway_stage.panda]
  deployment_id = aws_api_gateway_deployment.panda.id
  rest_api_id   = aws_api_gateway_rest_api.panda.id
  stage_name    = "panda"
}



resource "aws_cloudwatch_dashboard" "main" {
  dashboard_name = "test-d"

  dashboard_body = <<EOF
{
  "widgets": [
    {
      "type": "metric",
      "x": 0,
      "y": 0,
      "width": 12,
      "height": 6,
      "properties": {
        "metrics": [
          [
            "AWS/ApiGateway",
            "4XXError",
            "name",
            "${var.example}"
          ],
          [
           "AWS/ApiGateway",
            "5XXError",
            "name",
            "${var.example}"
          ]
        ],
        "period": 60,
        "stat": "Sum",
        "region": "enter-region",
        "title": "dashboard for 4XXError and 5XXXError"
      }
    },
    {
      "type": "text",
      "x": 0,
      "y": 7,
      "width": 3,
      "height": 3,
      "properties": {
        "markdown": "Hello world"
      }
    }
  ]
}
EOF
}


provider "aws" {
  region     = "Enter_Region"
  access_key = "Enter_Access_Key"
  secret_key = "Enter_Secret_Key"
}


resource "aws_sns_topic" "sns" {
  name = "user-updates-topic"
}

locals {
  rest_api_id = aws_api_gateway_rest_api.panda.id
}

output "rest_api_id" {
    value = local.rest_api_id
}

resource "aws_route53_health_check" "http" {
  fqdn              =     format("%s.%s",aws_api_gateway_rest_api.panda.id,"execute-api.enter_region.amazonaws.com")
  insufficient_data_health_status = "Healthy"
  port              = 443
  type              = "HTTPS"
  resource_path     = "/"
  failure_threshold = "3"
  request_interval  = "30"

  tags = {
    Name = "api-health-check"
  }
}
resource "aws_cloudwatch_metric_alarm" "http1" {
  depends_on          = [aws_route53_health_check.http]
  alarm_name          = "foobar"
  comparison_operator = "LessThanThreshold"
  evaluation_periods  = "1"
  metric_name         = "HealthCheckStatus"
  namespace           = "AWS/Route53"
  period              = "60"
  statistic           = "Minimum"
  alarm_description   = "This metric monitors ec2 cpu utilization"
  actions_enabled     = "true"
  alarm_actions       = [aws_sns_topic.sns.arn]
  ok_actions          = [aws_sns_topic.sns.arn]

  dimensions = {
    HealthCheckName = "api-health-check"
  }
}


{
  "variable": {
    "example": {
      "default": "panda"
    }
  }
}


