# raw-data/terraform-provider-azurerm-main\examples\virtual-machines\virtual_machine\encrypt-running-linux-vm
provider "azurerm" {
  features {}
}

resource "azurerm_resource_group" "rg" {
  name     = "${var.resource_group}"
  location = "${var.location}"
}

resource "azurerm_virtual_network" "vnet" {
  name                = "${var.hostname}vnet"
  location            = "${var.location}"
  address_space       = ["${var.address_space}"]
  resource_group_name = "${azurerm_resource_group.rg.name}"
}

resource "azurerm_subnet" "subnet" {
  name                 = "${var.hostname}subnet"
  virtual_network_name = "${azurerm_virtual_network.vnet.name}"
  resource_group_name  = "${azurerm_resource_group.rg.name}"
  address_prefixes     = ["${var.subnet_prefix}"]
}

resource "azurerm_network_interface" "nic" {
  name                = "nic"
  location            = "${var.location}"
  resource_group_name = "${azurerm_resource_group.rg.name}"

  ip_configuration {
    name                          = "ipconfig"
    subnet_id                     = "${azurerm_subnet.subnet.id}"
    private_ip_address_allocation = "Dynamic"
  }
}

resource "azurerm_storage_account" "stor" {
  name                     = "${var.hostname}stor"
  resource_group_name      = "${azurerm_resource_group.rg.name}"
  location                 = "${azurerm_resource_group.rg.location}"
  account_tier             = "${var.storage_account_tier}"
  account_replication_type = "${var.storage_replication_type}"
}

resource "azurerm_virtual_machine" "vm" {
  name                  = "${var.hostname}"
  location              = "${var.location}"
  resource_group_name   = "${azurerm_resource_group.rg.name}"
  vm_size               = "${var.vm_size}"
  network_interface_ids = ["${azurerm_network_interface.nic.id}"]

  storage_image_reference {
    publisher = "${var.image_publisher}"
    offer     = "${var.image_offer}"
    sku       = "${var.image_sku}"
    version   = "${var.image_version}"
  }

  storage_os_disk {
    name          = "${var.hostname}osdisk"
    create_option = "FromImage"
    disk_size_gb  = "30"
  }

  os_profile {
    computer_name  = "${var.hostname}"
    admin_username = "${var.admin_username}"
    admin_password = "${var.admin_password}"
  }

  os_profile_linux_config {
    disable_password_authentication = false
  }
}

resource "azurerm_template_deployment" "linux_vm" {
  name                = "encrypt"
  resource_group_name = "${azurerm_resource_group.rg.name}"
  deployment_mode     = "Incremental"
  depends_on          = ["azurerm_virtual_machine.vm"]

  template_body = <<DEPLOY
{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "aadClientID": {
      "defaultValue": "${var.aad_client_id}",
      "type": "string"
    },
    "aadClientSecret": {
      "defaultValue": "${var.aad_client_secret}",
      "type": "string"
    },
    "diskFormatQuery": {
      "defaultValue": "",
      "type": "string"
    },
    "encryptionOperation": {
      "allowedValues": [ "EnableEncryption", "EnableEncryptionFormat" ],
      "defaultValue": "${var.encryption_operation}",
      "type": "string"
    },
    "volumeType": {
      "allowedValues": [ "OS", "Data", "All" ],
      "defaultValue": "${var.volume_type}",
      "type": "string"
    },
    "keyEncryptionKeyURL": {
      "defaultValue": "${var.key_encryption_key_url}",
      "type": "string"
    },
    "keyVaultName": {
      "defaultValue": "${var.key_vault_name}",
      "type": "string"
    },
    "keyVaultResourceGroup": {
      "defaultValue": "${azurerm_resource_group.rg.name}",
      "type": "string"
    },
    "passphrase": {
      "defaultValue": "${var.passphrase}",
      "type": "string"
    },
    "sequenceVersion": {
      "defaultValue": "${var.sequence_version}",
      "type": "string"
    },
    "useKek": {
      "allowedValues": [
        "nokek",
        "kek"
      ],
      "defaultValue": "${var.use_kek}",
      "type": "string"
    },
    "vmName": {
      "defaultValue": "${azurerm_virtual_machine.vm.name}",
      "type": "string"
    },
    "_artifactsLocation": {
      "type": "string",
      "defaultValue": "${var.artifacts_location}"
    },
    "_artifactsLocationSasToken": {
      "type": "string",
      "defaultValue": "${var.artifacts_location_sas_token}"
    }
  },
  "variables": {
    "extensionName": "${var.extension_name}",
    "extensionVersion": "0.1",
    "keyEncryptionAlgorithm": "RSA-OAEP",
    "keyVaultURL": "https://${var.key_vault_name}.vault.azure.net/",
    "keyVaultResourceID": "${var.key_vault_resource_id}",
    "updateVmUrl": "${var.artifacts_location}/201-encrypt-running-linux-vm/updatevm-${var.use_kek}.json${var.artifacts_location_sas_token}"
  },
  "resources": [
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(parameters('vmName'),'/', variables('extensionName'))]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "protectedSettings": {
          "AADClientSecret": "[parameters('aadClientSecret')]",
          "Passphrase": "[parameters('passphrase')]"
        },
        "publisher": "Microsoft.Azure.Security",
        "settings": {
          "AADClientID": "[parameters('aadClientID')]",
          "DiskFormatQuery": "[parameters('diskFormatQuery')]",
          "EncryptionOperation": "[parameters('encryptionOperation')]",
          "KeyEncryptionAlgorithm": "[variables('keyEncryptionAlgorithm')]",
          "KeyEncryptionKeyURL": "[parameters('keyEncryptionKeyURL')]",
          "KeyVaultURL": "[variables('keyVaultURL')]",
          "SequenceVersion": "[parameters('sequenceVersion')]",
          "VolumeType": "[parameters('volumeType')]"
        },
        "type": "AzureDiskEncryptionForLinux",
        "typeHandlerVersion": "[variables('extensionVersion')]"
      }
    },
    {
      "apiVersion": "2015-01-01",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/extensions',  parameters('vmName'), variables('extensionName'))]"
      ],
      "name": "[concat(parameters('vmName'), 'updateVm')]",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "parameters": {
          "keyEncryptionKeyURL": {
            "value": "[parameters('keyEncryptionKeyURL')]"
          },
          "keyVaultResourceID": {
            "value": "[variables('keyVaultResourceID')]"
          },
          "keyVaultSecretUrl": {
            "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions',  parameters('vmName'), variables('extensionName'))).instanceView.statuses[0].message]"
          },
          "vmName": {
            "value": "[parameters('vmName')]"
          }
        },
        "templateLink": {
          "contentVersion": "1.0.0.0",
          "uri": "[variables('updateVmUrl')]"
        }
      }
    }
  ],
  "outputs": {
    "BitLockerKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Compute/virtualMachines/extensions',  parameters('vmName'), variables('extensionName'))).instanceView.statuses[0].message]"
    }
  }
}
DEPLOY
}


output "hostname" {
  value = "${var.hostname}"
}

output "BitLockerKey" {
  value     = "${azurerm_template_deployment.linux_vm.outputs["BitLockerKey"]}"
  sensitive = true
}


variable "resource_group" {
  description = "Resource group name into which your new virtual machine will go."
}

variable "location" {
  description = "The location/region where the virtual network is created. Changing this forces a new resource to be created."
  default     = "southcentralus"
}

variable "hostname" {
  description = "Used to form various names including the key vault, vm, and storage. Must be unique."
}

variable "address_space" {
  description = "The address space that is used by the virtual network. You can supply more than one address space. Changing this forces a new resource to be created."
  default     = "10.0.0.0/24"
}

variable "subnet_prefix" {
  description = "The address prefix to use for the subnet."
  default     = "10.0.0.0/24"
}

variable "storage_account_tier" {
  description = "Defines the Tier of storage account to be created. Valid options are Standard and Premium."
  default     = "Standard"
}

variable "storage_replication_type" {
  description = "Defines the Replication Type to use for this storage account. Valid options include LRS, GRS etc."
  default     = "LRS"
}

variable "vm_size" {
  description = "Specifies the size of the virtual machine. This must be the same as the vm image from which you are copying."
  default     = "Standard_F2"
}

variable "image_publisher" {
  description = "name of the publisher of the image (az vm image list)"
  default     = "Canonical"
}

variable "image_offer" {
  description = "the name of the offer (az vm image list)"
  default     = "UbuntuServer"
}

variable "image_sku" {
  description = "image sku to apply (az vm image list)"
  default     = "16.04-LTS"
}

variable "image_version" {
  description = "version of the image to apply (az vm image list)"
  default     = "latest"
}

variable "admin_username" {
  description = "administrator user name for the vm"
  default     = "vmadmin"
}

variable "admin_password" {
  description = "administrator password for the vm (recommended to disable password auth)"
}

variable "aad_client_id" {
  description = "Client ID of AAD app which has permissions to KeyVault"
}

variable "aad_client_secret" {
  description = "Client Secret of AAD app which has permissions to KeyVault"
}

variable "disk_format_query" {
  description = "The query string used to identify the disks to format and encrypt. This parameter only works when you set the EncryptionOperation as EnableEncryptionFormat. For example, passing [{\"dev_path\":\"/dev/md0\",\"name\":\"encryptedraid\",\"file_system\":\"ext4\"}] will format /dev/md0, encrypt it and mount it at /mnt/dataraid. This parameter should only be used for RAID devices. The specified device must not have any existing filesystem on it."
  default     = ""
}

variable "encryption_operation" {
  description = "EnableEncryption would encrypt the disks in place and EnableEncryptionFormat would format the disks directly"
  default     = "EnableEncryption"
}

variable "volume_type" {
  description = "Defines which drives should be encrypted. OS encryption is supported on RHEL 7.2, CentOS 7.2 & Ubuntu 16.04. Allowed values: OS, Data, All"
  default     = "All"
}

variable "key_encryption_key_url" {
  description = "URL of the KeyEncryptionKey used to encrypt the volume encryption key"
}

variable "key_vault_resource_id" {
  description = "uri of Azure key vault resource"
}

variable "key_vault_name" {
  description = "name of Azure key vault resource"
}

variable "passphrase" {
  description = "The passphrase for the disks"
}

variable "extension_name" {
  description = "the name of the vm extension"
  default     = "AzureDiskEncryptionForLinux"
}

variable "sequence_version" {
  description = "sequence version of the bitlocker operation. Increment this everytime an operation is performed on the same VM"
  default     = 1
}

variable "use_kek" {
  description = "Select kek if the secret should be encrypted with a key encryption key. Allowed values: kek, nokek"
  default     = "kek"
}

variable "artifacts_location" {
  description = "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
  default     = "https://raw.githubusercontent.com/Azure/azure-quickstart-templates/master"
}

variable "artifacts_location_sas_token" {
  description = "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
  default     = ""
}


