# Terraform Block with AWS provider
terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
    }
  }
}

# Provider Block: aws in us east 1
provider "aws" {
  profile = "default"
  region  = "us-east-1"
}

# Create a AWS VPC resource with private network 10.0.0.0/16
resource "aws_vpc" "my_vpc" {
  cidr_block = "10.0.0.0/16"
}

# Create AWS subnets resource in private network 10.0.1.0/24 and map public ip on launch set true
resource "aws_subnet" "my_subnet" {
  vpc_id            = "${aws_vpc.my_vpc.id}"
  cidr_block        = "10.0.1.0/24"
  map_public_ip_on_launch = true
}

# AWS Internet Gateway with vpc id aws_vpc.vpc-dev.id
resource "aws_internet_gateway" "gw" {
  vpc_id = "${aws_vpc.my_vpc.id}"
}

# Create AWS route table
resource "aws_route_table" "rt" {
  vpc_id = "${aws_vpc.my_vpc.id}"
}

# Create Route in Route Table for Internet Access
resource "aws_route" "r" {
  route_table_id         = "${aws_route_table.rt.id}"
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = "${aws_internet_gateway.gw.id}"
}

# Resource block: associate the Route Table with the Subnet
resource "aws_subnet_route_table_association" "a" {
  subnet_id      = "${aws_subnet.my_subnet.id}"
  route_table_id = "${aws_route_table.rt.id}"
}

# Create aws security group and allow port 22, 80 and all IP and Ports Outbound
resource "aws_security_group" "web" {
  name        = "terraform_example"
  description = "Allow SSH and TCP/{80,443} access."
  vpc_id      = "${aws_vpc.my_vpc.id}"

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks
}

# Create EC2 Instance with subnet, vpc security group, and ami Amazon Linux
resource "aws_instance" "web" {
  ami           = "ami-0ff8a91507f77f867"
  instance_type = "t2.micro"
  subnet_id     = "${aws_subnet.my_subnet.id}"
  vpc_security_group_ids = ["${aws_security_group.web.id}"]
}

# Resource block: Create Elastic IP
resource "aws_eip" "eip" {
  vpc = true
}

