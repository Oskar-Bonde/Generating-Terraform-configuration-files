terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
    }
  }
}

# google provider block with only region set to europe north1
provider "google" {
}

# data block with available google compute zones in europe west4. The status must be UP and project is terraform-338909
data "google_compute_zones" "available" {
}

# compute instance. Create an instance for each available compute zone. One zone for each value. Type f1 micro, debian 9 image, default network interface and giva a name.
resource "google_compute_instance" "vm_instance" {
  name = "my-vm"
  machine_type = "f1-micro"

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
    }
  }

  network_interface {
    network = "default"    
  }

  metadata = {
    ssh-keys = "ubuntu:${file("~/.ssh/${var.key_name}.pub")}"
  }

  # install nginx and serve a simple web page
  metadata_startup_script = "sudo apt-get update;"

  network_interface {
    network = "default"
  }

  # install nginx and serve a simple web page
  metadata_startup_script = "sudo apt-get install -y nginx"

  # Startup script is the default Terraform configuration
  metadata_startup_script = <<EOF
sudo apt-get update
sudo apt-get install -y nginx
sudo apt-get install -y apache2
sudo apt-get install -y nginx-light
sudo apt-get install -y nginx-light-ng"
EOF

  tags = ["web"]

  boot_disk {
    initialize_params {
      image = "debian-cloud/debian-9"
    }
  }

  network_interface {
    network = "default"
  }

  metadata = {
    ssh-keys = "ubuntu:${file("~/.ssh/${var.key_name}.pub")}"
  }

  service_account {
    scopes = ["https://www.googleapis.com/auth/compute.readonly"]
  }
}

