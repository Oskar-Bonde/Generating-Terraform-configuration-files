terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
    }
  }
}

# google provider block
provider "google" {
}

# create a node template
resource "google_compute_instance_template" "node_template" {
  name_prefix  = "node-template-"
  machine_type = "n1-standard-1"
  can_ip_forward = false

  disk {
    source_image = "debian-cloud/debian-9"
    auto_delete  = true
    boot         = true
  }

  network_interface {
    network = "default"    
    access_config {
    }
  }

  metadata = {
    startup-script = data.template_file.node_startup_script.rendered
  }

  service_account {
    scopes = ["userinfo-email", "compute-ro", "storage-ro"]
  }
}

# create a compute node group resource
resource "google_compute_instance_group_manager" "node_group_manager" {
  name = "my-node-group-manager"
  zone = "us-central1-a"

  version {
    instance_template = google_compute_instance_template.node_template.id
    name              = "my-node-group-manager"
  }

  target_size  = 1
  named_port {
    name = "http"
    port = "80"
  }

  version {
    instance_template = google_compute_instance_template.node_template.id
    name              = "my-node-group-manager"
  }

  named_port {
    name = "https"
    port = "443"
  }

  # auto_healing_policies {
  #   health_check      = google_compute_health_check.health_check.id
  #   initial_delay_sec = 300
  # }

  # boot_disk {
  #   initialize_params {
  #     image = "debian-cloud/debian-9"
  #     type  = "pd-standard"
  #   }
  # }

  # network_interface {
  #   network = "default"
  #   access_config {
  #     }
  # }

  # metadata = {
  #   startup-script = data.template_file.node_startup_script.rendered
  # }

  # service_account {
  #   scopes = ["userinfo-email", "compute-ro", "storage-ro"]
  # }
}

