terraform {
  required_providers {
    google = {
      source = "hashicorp/google"
    }
  }
}

# google provider block
provider "google" {
}

# create a node template
resource "google_compute_instance_template" "node_template" {
  name_prefix  = "node-template-"
  machine_type = "n1-standard-1"

  disk {
    source_image = "debian-cloud/debian-9"
    auto_delete  = true
    boot         = true
  }

  network_interface {
    network = "default"
    access_config {
    }
  }

  metadata = {
    startup-script = <<-EOF1
      #!/bin/bash
      sudo apt-get update
      apt-get install -y nginx-light jq

      NAME=node-template
      IP=${google_compute_address.gcp_sap_hana_intip_ip.address}
      METADATA=${google_compute_instance_metadata.vm_instance.metadata_value}
      NODE_NAME=node-template

      #!/bin/bash
      sudo apt-get update
      apt-get install -y nginx-light jq

      NAME=node-template
      IP=${google_compute_address.gcp_sap_hana_intip_ip.address}
      METADATA=${google_compute_instance_metadata.vm_instance.metadata_value}
      NODE_NAME=node-template

      #!/bin/bash
      sudo apt-get update
      apt-get install -y nginx-light jq

      # Create a script to configure the node
      provisioner "remote-exec" {
        inline = [
          "sudo apt-get -y update",
          "sudo apt-get -y install nginx",
          "sudo service nginx start"
        ]

        connection {
          type        = "ssh"
          user        = "root"
          private_key = "${file("~/.ssh/id_rsa")}"
          agent       = false
        }

        inline = [
          "sudo apt-get -y install curl",
          "sudo apt-get -y install gcc",
          "sudo service nginx start"
        ]

        connection {
          type        = "ssh"
          user        = "root"
          private_key = "${file("~/.ssh/id_rsa")}"
          agent       = false
        }

        inline = [
          "sudo apt-get -y install make",
          "sudo service nginx start"
        ]

        connection {
          type        = "ssh"
          user        = "root"
          private_key = "${file("~/.ssh/id_rsa")}"
          agent       = false
        }

        # Create a script to configure the node
        provisioner "remote-exec" {
          inline = [
            "sudo apt-get -y install curl",
            "sudo apt-get -y install gcc",
            "sudo service nginx start"
        ]

        connection {
          type        = "ssh"
          user        = "root"
          private_key = "${file("~/.ssh/id_rsa")}"
          agent       = false
        }

        inline = [
          "sudo apt-get -y install make",
          "sudo service nginx start"
        ]

        connection {
          type        = "ssh"
          user        = "root"
          private_key = "${file("~/.ssh/id_rsa")}"
          agent       = false
        }

        # Create a script to configure the node
        provisioner "remote-exec" {
          inline = [
            "sudo apt-get -y install curl",
            "sudo service nginx start"
        ]

        connection {
          type        = "ssh"
          user        = "root"
          private_key = "${file("~/.ssh/id_rsa")}"
          agent       = false
        }

        # Create a script to configure the node
        provisioner "remote-
}

