# raw-data/hashicorp-certified-terraform\15-Terraform-Expressions\15-02-Terraform-Dynamic-Expressions\terraform-manifests
# Terraform Block with AWS and random providers
terraform {
  required_version = "~> 0.14" 
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 3.0"
    }
    random = {
      source = "hashicorp/random"
      version = "~> 3.0"
    }    
  }
}

# Provider Block with region set to var.aws_region and default profile
provider "aws" {
  region  = var.aws_region
  profile = "default"
}

# variable with a list of Availability Zones. Defualt is us-east-1 a b and c
variable "availability_zones" {
  description = "List of Availability Zones resources will be created"
  type = list(string)
  default = ["us-east-1a", "us-east-1b", "us-east-1c"]
}

# varaible called high_availability, set to false by default
variable "high_availability" {
  type        = bool
  default     = false
}

# variable called name, set to ec2-user as default
variable "name" {
  type = string 
  default     = "ec2-user"
}

#variable called team, set to stacksimplify as default
variable "team" {
  type = string
  default     = "stacksimplify"
}

# resource called random_id, with byte_length 8
resource "random_id" "id" {
  byte_length = 8
}

# Locals with name and team set to variables
locals {
  name = var.name
  owner = var.team
  common_tags = {
    Owner = local.owner
    nametag = local.name 
  }
}

# Output: my-ec2-vm common tags
output "tags" {
  value = aws_instance.my-ec2-vm[*].tags
}

# Outout: ELB DNS Name
output "elb_dns_name" {
  value = aws_elb.elb[*].dns_name
}

# Resource, create AWS ELB
resource "aws_elb" "elb" {
  name    = "my-elb"
  listener {
    instance_port     = 80
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    target              = "HTTP:80/"
    interval            = 30
  }

  idle_timeout                = 400
  connection_draining         = true
  connection_draining_timeout = 400

  # Splat Expression
  instances                   = aws_instance.my-ec2-vm[*].id

  # Dynamic Expressions
  count = (var.high_availability == true ? 1 : 0)
  availability_zones = var.availability_zones
  tags = local.common_tags
}



